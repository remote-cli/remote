#!/bin/bash
NULL_LOCAL_DIRECTORY="__null__"
IGNORE_FILE_NAME=".remoteignore"

trap common_cleanup SIGHUP SIGINT SIGTERM

common_cleanup()
{
  rm -f /tmp/remote.*
  exit
}

#performs md5 of string passed in
#uses md5 or md5sum depending on what it finds
do_md5()
{
  which md5 2>/dev/null 1>/dev/null
  if [ $? == 0 ]
  then
    echo $@ | md5
    return
  fi
  which md5sum 2>/dev/null 1>/dev/null
  if [ $? == 0 ]
  then
    echo $@ | md5sum | sed 's/^\(.*\) .*$/\1/'
    return
  fi
}

# Finds the directory in this tree that has remote-ing set up.
get_local_directory()
{
  if [ -f .remote ]
  then
    pwd
  else
    if [ `pwd` = "/" ]
      then 
        echo "Could not find any remote-enabled directory set up in this tree"
        echo "Exiting..."
        exit 1 
    else
      pushd ../ > /dev/null
      get_local_directory
      popd > /dev/null
    fi
  fi
}

# Returns the remote directory where the command needs to be executed
get_remote_command_directory()
{
  local this_dir=`pwd`
  local root_dir=`get_local_directory`
  diff=`echo $this_dir | sed s:$root_dir::`
  echo `get_remote_directory`$diff
}


# Returns the remote directory that would map to the current local directory
# Only used during remote-init if no remote directory is specified
get_remote_init_directory()
{
  local local_dir=`pwd`
  remote_directory=`do_md5 $local_dir`
  echo .remotes/$remote_directory
}

get_line_number()
{
  local_dir=`get_local_directory`
  #If REMOTE_HOST_INDEX is set, that overrides settings in .remoteindex
  if [ "x$REMOTE_HOST_INDEX" == "x" ]
    then
      if [ -f "$local_dir"/.remoteindex ]
      then
        lineNo=`cat "$local_dir"/.remoteindex`
      else
        lineNo=1
      fi
    else
      lineNo=$REMOTE_HOST_INDEX
  fi
}

get_remote_directory()
{
  local_dir=`get_local_directory`
  get_line_number
  local remote_dir=`cat $local_dir/.remote | awk -v line="$lineNo" '{ if (NR==line) print $1}' | cut -d ":" -f 2`
  # normalize remote_dir : leave paths starting with ~ or / alone. Add "~/" for all other paths
  local remote_dir=`echo $remote_dir | awk '/^~/  { print;next }  /^\// { print;next } // { print "~/"$1 }'`
  echo "$remote_dir"
}

get_remote_host()
{
  local_dir=`get_local_directory`
  if [ -z $1 ]
  then
    if [ "x$REMOTE_HOST_INDEX" == "x" ]
    then
      if [ -e $local_dir/.remoteindex ]
        then
          lineNo=`cat $local_dir/.remoteindex`
        else
          lineNo=1
      fi
    else
      lineNo=$REMOTE_HOST_INDEX
    fi
  else
    lineNo=$1
  fi
  cat "$local_dir/.remote" | awk -v line="$lineNo" '{ if (NR==line) print $1}' | cut -d ":" -f 1
}

#Process any additional directives on the host-line in the .remote file
#Variables like RSHELL and RSHELL_OPTS can be set there to configure remote execution behavior
get_remote_shell()
{
  local_dir=`get_local_directory`
  get_line_number
  #if global variable $RSHELL is not set, set the default
  if [ -z "$RSHELL" ]; then
    RSHELL="bash"
  fi
  #eval any host specific variables to set host-specific overrides
  eval $( cat $local_dir/.remote | awk -v line="$lineNo" ' { if (NR==line && NF>1) {for (i=2; i<NF; i++) printf $i " "; print $NF}}' )
}

# Detect the version of the ignore file that we are working with
# 0 -> old school : list of ignore patterns that work both ways
# 1 -> new style  : support for separate push / pull / both way ignore patterns
get_ignore_file_version()
{
  if [ -f $IGNORE_FILE_NAME ]; then
    grep -q "^\s*push\s*:" $IGNORE_FILE_NAME
    if [ $? -eq 0 ]; then
      echo "1"
      exit 0
    fi
    grep -q "^\s*pull\s*:" $IGNORE_FILE_NAME
    if [ $? -eq 0 ]; then
      echo "1"
      exit 0
    fi
    grep -q "^\s*both\s*:" $IGNORE_FILE_NAME
    if [ $? -eq 0 ]; then
      echo "1"
      exit 0
    fi
  fi
  # either we don't have a file, or we couldn't find our patterns
  echo "0"
}


get_pull_ignores()
{
  local tmpfile=$(mktemp /tmp/remote.XXXXXX)
  echo ".remote" > $tmpfile
  echo "$IGNORE_FILE_NAME" >> $tmpfile
  local ignore_version=`get_ignore_file_version`
  if [ "$ignore_version" == "0" ]; then
    # Assume that old .remoteignore contains "bidirectional" ignore rules
    if [ -f .remoteignore ]; then
      cat .remoteignore >> $tmpfile
    fi
  else
    awk 'BEGIN { printit = 0} \
         /^\s*#/ { next } \
         /pull:/ { printit=1; next } \
         /push:/ { printit=0; next } \
         /both:/ { printit=1; next }\
         /^.*$/ { if (printit == 1) {print $0 }} \
        ' $IGNORE_FILE_NAME >> $tmpfile
  fi
  echo $tmpfile
}

get_pull_includes()
{
  local tmpfile=$(mktemp /tmp/remote.XXXXXX)
  local ignore_version=`get_ignore_file_version`
  if [ "$ignore_version" != "0" ]; then
    awk 'BEGIN { printit = 0} \
         /^\s*#/ { next } \
         /pull:/ { printit=0; next } \
         /push:/ { printit=1; next } \
         /both:/ { printit=0; next }\
         /^.*$/ { if (printit == 1) {print $0 }} \
        ' $IGNORE_FILE_NAME >> $tmpfile
  fi
  echo $tmpfile
}

get_push_ignores()
{
  local tmpfile=$(mktemp /tmp/remote.XXXXXX)
  echo ".remote" > $tmpfile
  echo $IGNORE_FILE_NAME >> $tmpfile
  local ignore_file_version=`get_ignore_file_version`
  if [ "$ignore_file_version" == "0" ]; then
    if [ -f .remoteignore ]; then
      cat .remoteignore >> $tmpfile
    fi
  else
    awk 'BEGIN { printit = 0} \
         /^\s*#/ { next } \
         /pull:/ { printit=0; next } \
         /push:/ { printit=1; next } \
         /both:/ { printit=1; next }\
         /^.*$/ { if (printit == 1) {print $0 }} \
        ' $IGNORE_FILE_NAME >> $tmpfile
  fi
  echo $tmpfile
}

#print a single character n times
print_char_n_times() {
  eval printf "$1%.0s" {1..$2}
  printf '\n'
}

#The main workhorse, syncs to the remote destination and back
ensure_synced()
{
  local OPTIND
  local verbosity_flag=""
  local dry_run_flag=""
  local info_flag=""
  local direction="push"
  while getopts ":ivnmr" opt; do
    case ${opt} in
      i ) info_flag="-i"
          ;;
      v )
          verbosity_flag="-v"
          ;;
      n )
          dry_run_flag="-n"
          ;;
      m )
          mirror_flag="--delete-excluded"
          ;;
      r ) direction="pull"
          ;;
    esac
  done

  remote_host=`get_remote_host`
  remote_dir=`get_remote_directory`
  local_dir=`get_local_directory`
  pushd $local_dir > /dev/null
  if [[ "$direction" == "push" ]]; then
    push_ignores=`get_push_ignores`
    start=`date +%s`
    if [[ "$verbosity_flag" != "" ]]; then
      echo "Push Ignore Patterns"
      cat $push_ignores | sed 's/^/  - /'
    fi
    if [[ "$info_flag" != "" || "$verbosity_flag" != "" ]]; then
      if [[ "$dry_run_flag" == "" ]]; then
        echo "Starting sync..."
      else
        echo "Starting sync... (dry run)"
      fi
    fi
    rsync -rlpchz $info_flag $verbosity_flag $dry_run_flag --copy-unsafe-links -e "ssh -q" --delete --delete-after $mirror_flag --force \
      --exclude-from $push_ignores ./ $remote_host:$remote_dir || {
          echo "Failed to rsync. Is remote host $remote_host reachable?"
          exit 1
    }
    rm -f $push_ignores
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    if [[ "$info_flag" != "" || "$verbosity_flag" != "" ]]; then
      echo "Sync done in $runtime seconds."
      print_char_n_times "_" 40
    fi
  else # direction = pull
    pull_includes=`get_pull_includes`
    pull_ignores=`get_pull_ignores`
    if [[ "$verbosity_flag" != "" ]]; then
      echo "Pull Include Patterns"
      cat $pull_includes | sed 's/^/  - /'
      echo "Pull Ignore Patterns"
      cat $pull_ignores | sed 's/^/  - /'
    fi
      start=`date +%s`
    if [[ "$info_flag" != "" || "$verbosity_flag" != "" ]]; then
      print_char_n_times "_" 40
      if [[ "$dry_run_flag" == "" ]]; then
        echo "Starting reverse sync..."
      else
        echo "Starting reverse sync... (dry run)"
      fi
    fi
    rsync -rlpmchz $info_flag $verbosity_flag $dry_run_flag --copy-unsafe-links --exclude-from=$pull_ignores --include-from=$pull_includes --include='*/' --exclude='*' \
      $remote_host:$remote_command_dir . || {
      echo "Failed to pull. Is remote host $remote_host reachable?"
      exit 1
    }
    rm -f $pull_includes $pull_ignores
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    if [[ "$info_flag" != "" || "$verbosity_flag" != "" ]]; then
      if [[ "$dry_run_flag" == "" ]]; then
        echo "Reverse sync done in $runtime seconds."
      else
        echo "Reverse sync done in $runtime seconds. (dry run)"
      fi
    fi
  fi
  popd > /dev/null
}

verify_setup()
{
  #check that local directory for .remote is found
  local local_directory=`get_local_directory` || {
    echo "Failed to find a local remote directory. Did you remote-init yet?"
    exit 1
  }
}

# A spinner printer to the console
spin() {
  declare message=$1
  declare pid=$2
  local -a marks=( '/' '-' '\' '|' )
  while kill -0 $pid 2>/dev/null; do
     printf '  %s %s\r' "$message" "${marks[i++ % ${#marks[@]}]}"
     sleep 1
  done
}

verify_connection()
{
  RED="\033[1;31m"
  GREEN="\033[1;32m"
  NOCOLOR="\033[0m"
  declare remote_host="$1"
  declare connection_testing_depth="$2"
  echo "Connection Stats for $remote_host"
  # first test liveness
  ping -c 1 $remote_host 2>/dev/null 1>/dev/null
  if [ $? -eq 0 ]; then
    echo -e "  - Host is ${GREEN}reachable${NOCOLOR}"
    #setup remote shell variables
    get_remote_shell
    remote_exec_works="false"
    passwordless_ssh_works="true"
    local tmpfile=$(mktemp /tmp/remote.XXXXXX)
    ssh -tKq "$remote_host" "$RSHELL $RSHELL_OPTS -l -c 'echo success'" 2>&1 1>"$tmpfile" &
    sleep 5
    grep -q "success" "$tmpfile"
    if [ $? -eq 0 ]; then
      remote_exec_works="true"
    else
      kill %1
    fi
    rm -f "$tmpfile"
    if [[ "$remote_exec_works" == "false" ]]; then
      # try --noprofile based login
      ssh -Kq "$remote_host" "bash --noprofile -l -c 'echo success'" 2>&1 1>"$tmpfile" &
      sleep 5
      grep -q "success" "$tmpfile"
      if [ $? -eq 0 ]; then
        passwordless_ssh_works="true"
        echo -e "  - Passwordless ssh to $remote_host is ${GREEN}working${NOCOLOR}"
        echo -e "  - Bash profile on remote host is ${RED}busted.${NOCOLOR}"
        echo -e "  -       Either set ${RED}RSHELL_OPTS=--noprofile${NOCOLOR}"
        echo -e "  -       OR set ${RED}RSHELL=zsh${NOCOLOR} in your .remote file"
      else
        kill %1
        passwordless_ssh_works="false"
        echo -e "  - Passwordless ssh to $remote_host is ${RED}not working${NOCOLOR}"
        echo -e "  - Try running ${GREEN}ssh -Kq $remote_host \"bash --noprofile -l -c 'echo success'\"${NOCOLOR}"
      fi
      rm -f "$tmpfile"
    else
        echo -e "  - Remote execution on $remote_host is ${GREEN}working${NOCOLOR}"
    fi
    if [[ "$connection_testing_depth" == "deep" ]]; then
      #Test Latency with 5 pings
      ping -c 5 $remote_host 2>.ping.err 1>.ping.out &
      pid=$!
      spin "Collecting latency measurements" $pid
      awk '/transmitted/ || /round-trip/' .ping.out | sed 's/^/  - /'
      rm -f .ping.err .ping.out
      #Test Bandwidth
      test_file=".data.out"
      file_size=10024
      #Create a 512MB file on the remote host
      ssh $remote_host "dd if=/dev/zero of=$test_file bs=1048576 count=512 &>/dev/null"
      scp -v $remote_host:$test_file $test_file 2>&1 | \
        grep "Bytes per second" | \
        sed "s/^[^0-9]*\([0-9.]*\)[^0-9]*\([0-9.]*\).*$/\2/g" > down_speed &
      spin "Checking download speed:" $!
      down_speed=`cat down_speed`
      rm -f down_speed
      down_speed=`bytes_per_sec_to_printable_text $down_speed`
      echo "  - Download speed: $down_speed           "
      #Create a 10MB file on the local host
      dd if=/dev/urandom of=$test_file bs=1048576 count=10 &> /dev/null
      scp -v $test_file $remote_host:$test_file 2>&1 | \
        grep "Bytes per second" | \
        sed "s/^[^0-9]*\([0-9.]*\)[^0-9]*\([0-9.]*\).*$/\1/g" > up_speed &
      spin "Checking upload speed:" $!
      up_speed=`cat up_speed`
      rm -f up_speed
      up_speed=`bytes_per_sec_to_printable_text $up_speed`
      echo "  - Upload speed:   $up_speed             "
      rm -f $test_file
      ssh -q $remote_host "rm -f $test_file"
    fi
  else
    echo -e "  - Host is ${RED}unreachable${NOCOLOR}"
    exit 1
  fi
  #if passwordless ssh is not working, no use trying anything else
  if [[ "$passwordless_ssh_works" == "false" ]]; then
    exit 1
  fi
}

# Converts a bytes per second number to a printable rate (Kbps/Mbps etc)
bytes_per_sec_to_printable_text()
{
  declare input_speed_Bps=$1
  input_speed=$(echo "scale=2; $input_speed_Bps/125" | bc -l)
  speed_units="Kbps"
  if (( $(echo "$input_speed > 1000" | bc -l) )); then
      input_speed=$(echo "scale=2; $input_speed/1000" | bc -l)
      speed_units="Mb/s"
  fi
  echo "$input_speed $speed_units"
}

generate_command()
{
  local OPTIND
  local command_mode=""
  while getopts ":e" opt; do
    case ${opt} in
    e )
      command_mode="true"
    ;;
    esac
  done
  shift $((OPTIND -1))

  declare cmd_file_name="$1"
  declare remote_dir="$2"
  declare remote_command_dir="$3"
  shift 3
  rm -f $cmd_file_name
  cat <<EOT >> $cmd_file_name
#delete myself first
rm $cmd_file_name
#source .remotenv, ignore errors
if [ -f $remote_dir/.remoteenv ]; then
  source $remote_dir/.remoteenv 2>/dev/null 1>/dev/null
fi
#drop into remote dir
cd $remote_command_dir
EOT

if [ "$command_mode" == "" ]; then
  cat <<EOT >> $cmd_file_name
#execute actual command (escape special characters)
$(printf ' %q' "$@")
EOT
  else
  cat <<EOT >> $cmd_file_name
#execute actual command
$(printf "$@")
EOT
  fi
  chmod a+x $cmd_file_name
}

